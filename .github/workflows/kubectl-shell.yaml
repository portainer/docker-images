name: "kubectl-shell"

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - 'kubectl-shell/**'
  pull_request:
    branches:
      - develop
    paths:
      - 'kubectl-shell/**'

env:
  DOCKER_HUB_REPO: portainerci/kubectl-shell
  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  build_images:
    strategy:
      matrix:
        config:
          - { platform: linux, arch: amd64 }
          - { platform: linux, arch: arm64 }
          - { platform: linux, arch: arm }
          - { platform: linux, arch: ppc64le }
    runs-on: ubuntu-latest
    steps:
      - name: "[preparation] checkout"
        uses: actions/checkout@v4.1.1

      - name: "[preparation] set up qemu"
        uses: docker/setup-qemu-action@v3.2.0

      - name: "[preparation] set up docker context for buildx"
        run: docker context create builders

      - name: "[preparation] set up docker buildx"
        uses: docker/setup-buildx-action@v3.6.1
        with:
          endpoint: builders
          driver-opts: image=moby/buildkit:v0.16.0

      - name: "[preparation] docker login"
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: "[preparation] set the container image tag"
        run: |
          if [[ "${GITHUB_REF_NAME}" =~ ^release/.*$ ]]; then
            # use the release branch name as the tag for release branches
            # for instance, release/2.19 becomes 2.19
            echo "CONTAINER_IMAGE_TAG=$(echo $GITHUB_REF_NAME | cut -d '/' -f 2)" >> $GITHUB_ENV
          elif [ "${GITHUB_EVENT_NAME}" == "pull_request" ]; then
            # use pr${{ github.event.number }} as the tag for pull requests
            # for instance, pr123
            echo "CONTAINER_IMAGE_TAG=pr${{ github.event.number }}" >> $GITHUB_ENV
          else
            # replace / with - in the branch name
            # for instance, feature/1.0.0 -> feature-1.0.0
            echo "CONTAINER_IMAGE_TAG=$(echo $GITHUB_REF_NAME | sed 's/\//-/g')" >> $GITHUB_ENV"
          fi

      - name: "build and push images"
        uses: docker/build-push-action@v6.7.0
        with:
          context: kubectl-shell/ 
          tags: ${{ env.DOCKER_HUB_REPO }}:${{ env.CONTAINER_IMAGE_TAG }}
          build-args: |
            KUBERNETES_RELEASE=v1.31.0
            ALPINE=alpine:latest
            HELM_VERSION=v3.15.4
          platforms: ${{ matrix.config.platform }}/${{ matrix.config.arch }}
          sbom: true
          provenance: true
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  #     - name: "update manifest"
  #       run: |
  #         docker buildx imagetools create --append -t ${{ env.DOCKER_HUB_REPO }}:${{ env.CONTAINER_IMAGE_TAG }}

  # build_manifests:
  #   runs-on: ubuntu-latest
  #   needs: [build_images]
  #   if: github.event.pull_request.draft == false
  #   steps:
  #     - name: "[preparation] set up docker context for buildx"
  #       run: docker context create builders

  #     - name: "[preparation] set up docker buildx"
  #       uses: docker/setup-buildx-action@v3.6.1
  #       with:
  #         endpoint: builders
  #         driver-opts: image=moby/buildkit:v0.16.0

  #     - name: "[preparation] docker login"
  #       uses: docker/login-action@v3.3.0
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_PASSWORD }}

  #     - name: "[execution] build and push manifests"
  #       run: |
  #         docker buildx imagetools create -t "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}" \
  #           "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-linux-amd64" \
  #           "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-linux-arm64" \
  #           "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-linux-arm" \
  #           "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-linux-ppc64le" \
  #           "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-windows1809-amd64" \
  #           "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-windowsltsc2022-amd64"

  #         docker buildx imagetools create -t "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-alpine" \
  #           "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-linux-amd64-alpine" \
  #           "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-linux-arm64-alpine" \
  #           "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-linux-arm-alpine"
  #       env:
  #         CONTAINER_IMAGE_TAG: ${{ needs.build_images.outputs.CONTAINER_IMAGE_TAG }}
